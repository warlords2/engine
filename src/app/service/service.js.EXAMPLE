const { Service } = require("./service");

const loginRepository = globalThis.manager.database.getRepository(Login);

export class LoginService extends Service{

    async registerUser(userData) {
        // Verifica se já existe um usuário com o mesmo email
        const existingUser = await this.userRepository.findOne({ email: userData.email });
        if (existingUser) {
            throw new Error('User already exists');
        }

        // Cria um novo usuário
        const newUser = await this.userRepository.create(userData);
        await this.userRepository.save(newUser);

        // Envia um email de boas-vindas para o novo usuário
        await this.emailService.sendWelcomeEmail(newUser.email);

        return newUser;
    }
    
    async login(email, password) {
        /* -- Verifica se o usuário existe na base de dados

        const user = await this.userRepository.findOne({ email });
        if (!user) {
            throw new Error('Invalid email or password');
        }

        // Verifica se a senha está correta
        const passwordMatch = await user.checkPassword(password);
        if (!passwordMatch) {
            throw new Error('Invalid email or password');
        }

        // Retorna o token de autenticação
        const token = generateAuthToken(user.id);
        return token;/* */
    }
    
    async logout(userId) {
        // Remove o token de autenticação do usuário
        //await this.userRepository.update(userId, { authToken: null });
    }
    
    async requestPasswordReset(email) {
        
        /* -- Verifica se o usuário existe na base de dados

        const user = await this.userRepository.findOne({ email });
        if (!user) {
            throw new Error('Invalid email');
        }

        // Gera um token para redefinição de senha
        const resetToken = generateResetToken();

        // Salva o token na base de dados
        user.resetPasswordToken = resetToken;
        user.resetPasswordExpires = Date.now() + 3600000; // Token expira em 1 hora
        await this.userRepository.save(user);

        // Envia um email com o link para redefinição de senha
        await this.emailService.sendPasswordResetEmail(user.email, resetToken);

        return { message: 'Password reset email sent' };/* */
    }

    async resetPassword(resetToken, newPassword) {
        
        /* -- Busca o usuário pelo token de redefinição de senha

        const user = await this.userRepository.findOne({ resetPasswordToken: resetToken });
        //if (!user) {
        //    throw new Error('Invalid token');
        }

        // Verifica se o token ainda é válido
        if (user.resetPasswordExpires < Date.now()) {
            throw new Error('Token has expired');
        }

        // Define a nova senha do usuário
        user.password = newPassword;
        user.resetPasswordToken = null;
        user.resetPasswordExpires = null;
        await this.userRepository.save(user);

        return { message: 'Password reset successful' };/* */
    }
}